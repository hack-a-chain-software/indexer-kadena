/**
 * Coinbase Transaction Processing Service
 *
 * This module handles the processing of coinbase transactions in the Kadena blockchain.
 * Coinbase transactions are special transactions that reward miners with newly minted tokens
 * and are present in every block. Unlike regular transactions, coinbase transactions are
 * generated automatically by the blockchain protocol.
 *
 * The module is responsible for:
 * 1. Extracting coinbase transaction data from blocks
 * 2. Processing and storing coinbase transactions in the database
 * 3. Processing events and transfers associated with coinbase transactions
 * 4. Establishing relationships between coinbase transactions, blocks, and events
 */

import TransactionModel, { TransactionCreationAttributes } from '@/models/transaction';
import Transfer, { TransferAttributes } from '@/models/transfer';
import { Transaction } from 'sequelize';
import Event, { EventAttributes } from '@/models/event';
import { getCoinTransfers } from './transfers';
import Signer from '@/models/signer';
import Guard from '@/models/guard';
import { mapToEventModel } from '@/models/mappers/event-mapper';

/**
 * Interface representing the structured data of a coinbase transaction.
 * This is used as an intermediary structure before data is saved to the database.
 */
interface CoinbaseTransactionData {
  /** The core transaction attributes */
  transactionAttributes: TransactionCreationAttributes;
  /** Events generated by the coinbase transaction */
  eventsAttributes: EventAttributes[];
  /** Token transfers associated with the coinbase transaction */
  transfersCoinAttributes: TransferAttributes[];
}

/**
 * Processes and adds coinbase transactions from an array of blocks to the database.
 *
 * This function:
 * 1. Extracts and processes the coinbase data from each block
 * 2. Creates transaction records for each coinbase transaction
 * 3. Creates associated event and transfer records
 * 4. Associates all these records with their blocks
 *
 * @param rows - Array of block data containing coinbase information
 * @param tx - Database transaction for ensuring atomicity
 * @returns Promise resolving to an array of event attributes created from coinbase transactions
 *
 * TODO: [OPTIMIZATION] Consider implementing batch size limits for performance with large blocks
 */
export async function addCoinbaseTransactions(
  rows: Array<any>,
  tx: Transaction,
): Promise<EventAttributes[]> {
  // Process coinbase data from each block in parallel
  const fetchPromises = rows.map(async row => {
    const output = await processCoinbaseTransaction(row.coinbase, {
      id: row.id,
      chainId: row.chainId,
      creationTime: row.creationTime,
    });
    return output;
  });

  // Filter out any undefined results (blocks without coinbase data)
  const allData = (await Promise.all(fetchPromises)).filter(
    (f): f is CoinbaseTransactionData => f !== undefined,
  );

  // Bulk create transaction records for all coinbase transactions
  const transactionsAdded = await TransactionModel.bulkCreate(
    allData.map(o => o.transactionAttributes),
    {
      transaction: tx,
      returning: ['id'],
    },
  );

  // Prepare transfer records with transaction IDs
  const transfersToAdd = allData
    .map((d, index) => {
      const transfersWithTransactionId = (d.transfersCoinAttributes ?? []).map(t => ({
        ...t,
        transactionId: transactionsAdded[index].id,
      }));
      return transfersWithTransactionId;
    })
    .flat();

  // Prepare event records with transaction IDs
  const eventsToAdd = allData
    .map((d, index) => {
      const eventsWithTransactionId = (d.eventsAttributes ?? []).map(t => ({
        ...t,
        transactionId: transactionsAdded[index].id,
      }));
      return eventsWithTransactionId;
    })
    .flat();

  // Bulk create transfer records
  await Transfer.bulkCreate(transfersToAdd, {
    transaction: tx,
  });

  // Bulk create event records
  await Event.bulkCreate(eventsToAdd, {
    transaction: tx,
  });

  return eventsToAdd;
}

/**
 * Processes a single coinbase transaction and extracts its data.
 *
 * This function:
 * 1. Extracts transaction attributes from the coinbase data
 * 2. Processes transfer events associated with the coinbase
 * 3. Processes general events associated with the coinbase
 * 4. Returns a structured representation of all this data
 *
 * @param coinbase - The coinbase data from a block
 * @param block - Metadata about the block containing the coinbase
 * @returns Promise resolving to a structured coinbase transaction data object, or undefined if no coinbase data
 *
 * TODO: [OPTIMIZATION] Implement more robust error handling for malformed coinbase data
 */
export async function processCoinbaseTransaction(
  coinbase: any,
  block: { id: number; chainId: number; creationTime: bigint },
): Promise<CoinbaseTransactionData | undefined> {
  if (!coinbase) return;

  const eventsData = (coinbase.events || []).map((event: any, index: number) => ({
    ...event,
    orderIndex: index,
  }));

  // Create transaction attributes for the coinbase transaction
  const transactionAttributes = {
    blockId: block.id,
    chainId: block.chainId,
    creationtime: Math.trunc(Number(block.creationTime) / 1000000).toString(),
    hash: coinbase.reqKey,
    result: coinbase.result,
    logs: coinbase.logs,
    num_events: eventsData ? eventsData.length : 0,
    requestkey: coinbase.reqKey,
    sender: 'coinbase',
    txid: coinbase.txId.toString(),
  } as TransactionCreationAttributes;

  // Process coin transfers associated with the coinbase transaction
  const transfersCoinAttributes = await getCoinTransfers(eventsData, transactionAttributes);

  const eventsAttributes = mapToEventModel(eventsData, transactionAttributes);

  // Return the structured coinbase transaction data
  return { transactionAttributes, eventsAttributes, transfersCoinAttributes };
}
