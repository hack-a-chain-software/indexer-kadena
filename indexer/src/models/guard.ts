/**
 * Guard Model Definition
 *
 * This module defines the Guard model, which represents security predicates and public keys
 * associated with accounts in the Kadena blockchain. Guards are fundamental to Kadena's
 * security model, controlling who can access and transact with specific account balances.
 *
 * Guards consist of:
 * 1. Public keys - Cryptographic identifiers used for signature verification
 * 2. Predicates - Logical conditions that must be satisfied for transaction authorization
 * 3. Balance association - Link to the account balance they secure
 *
 * The Guard model enables the indexer to track and validate account access permissions
 * across the blockchain.
 */

import { Model, DataTypes, Optional } from 'sequelize';
import { sequelize } from '../config/database';
import Balance from './balance';

/**
 * Interface defining the attributes of a Guard.
 * These attributes represent the essential properties of account guards
 * as they are stored in the database.
 */
export interface GuardAttributes {
  /** Unique identifier for the guard record */
  id: number;
  /** Public key associated with the account */
  publicKey: string;
  /** Predicate expression defining the authorization conditions */
  predicate: string;
  /** Reference to the balance this guard protects */
  balanceId: number;
}

/**
 * Interface for Guard creation attributes, making id optional during creation
 * since it's auto-generated by the database.
 */
interface GuardCreationAttributes extends Optional<GuardAttributes, 'id'> {}

/**
 * Represents a security guard in the blockchain.
 *
 * Guards define the authentication and authorization requirements for
 * performing operations on an account's balance, typically through
 * a combination of public keys and predicate logic.
 */
class Guard extends Model<GuardAttributes, GuardCreationAttributes> implements GuardAttributes {
  /** The unique identifier for the guard record */
  public id!: number;
  /** The public key associated with the account */
  public publicKey!: string;
  /** The predicate associated with the account, public key and chain */
  public predicate!: string;
  /** The ID of the associated balance */
  public balanceId!: number;
}

/**
 * Initialize the Guard model with its attributes and configuration.
 * This defines the database schema for the Guards table and sets up indexes
 * for efficient querying of guard data.
 *
 * The model includes a composite unique index on publicKey, predicate, and balanceId
 * to prevent duplicate guard entries for the same account balance.
 */
Guard.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
      comment: 'The unique identifier for the signer',
    },
    publicKey: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'The public key associated with the account',
    },
    predicate: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'The predicate associated with the account, public key and chain',
    },
    balanceId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'The ID of the associated balance (e.g., 204).',
    },
  },
  {
    sequelize,
    modelName: 'Guard',
    tableName: 'Guards',
    indexes: [
      {
        name: 'guards_publickey_predicate_balanceid_idx',
        fields: ['publicKey', 'predicate', 'balanceId'],
        unique: true,
      },
    ],
  },
);

/**
 * Define relationships between the Guard model and other models.
 *
 * Guards belong to:
 * - Balance - Each guard is associated with a specific balance record
 *
 * This relationship enables efficient querying of authorization data
 * for account balances across the blockchain.
 */
Guard.belongsTo(Balance, {
  foreignKey: 'balanceId',
  as: 'balance',
});

export default Guard;
