/**
 * Transaction Model Definition
 *
 * This module defines the Transaction model, which represents blockchain transactions in the Kadena network.
 * It includes the core transaction data structure, relationships to other entities, and GraphQL schema
 * extensions for API access. Transactions are the fundamental units of blockchain activity,
 * containing information about state changes, transfers, and events.
 *
 * The model provides:
 * 1. Core transaction attributes and structure
 * 2. Database schema definition with indexes for efficient querying
 * 3. Relationship definitions to related entities (Block, Events, etc.)
 * 4. Type definitions for GraphQL schema integration
 */

import { Model, DataTypes, Optional } from 'sequelize';
import { sequelize } from '../config/database';
import Block from './block';

/**
 * Interface defining the core attributes of a Transaction.
 * These attributes represent the fundamental properties of blockchain transactions
 * as stored in the database.
 */
export interface TransactionAttributes {
  id: number;
  blockId: number;
  chainId: number;
  creationtime: string;
  hash: string;
  result: object;
  logs: string;
  num_events: number;
  requestkey: string;
  sender: string;
  txid: string;
  canonical?: boolean;
}

/**
 * Interface for transaction creation, making the 'id' attribute optional
 * since it's auto-generated by the database.
 */
export interface TransactionCreationAttributes extends Optional<TransactionAttributes, 'id'> {}

/**
 * Represents a transaction in the blockchain.
 *
 * A transaction is a record of a state change in the blockchain, containing
 * information about the sender, receiver, amount, and other metadata.
 */
class Transaction
  extends Model<TransactionAttributes, TransactionCreationAttributes>
  implements TransactionAttributes
{
  /** The unique identifier for the transaction record (e.g., 53411). */
  declare id: number;

  /** The ID of the associated block (e.g., 40515). */
  declare blockId: number;

  /** The result of the transaction (e.g., {"data": "Write succeeded", "status": "success"}). */
  declare result: object;

  /** The ID of the blockchain network (e.g., 0). */
  declare chainId: number;

  /** The creation time of the transaction (e.g., "1715747797"). */
  declare creationtime: string;

  /** The hash of the transaction (e.g., "S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU"). */
  declare hash: string;

  /** The logs generated by the transaction (e.g., "XGZIbkOVNtZkqzi1c2dUP-rrnwG0qALO-EVPXTZhV2I"). */
  declare logs: string;

  /** The number of events generated by the transaction (e.g., 1). */
  declare num_events: number;

  /** The request key of the transaction (e.g., "S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU"). */
  declare requestkey: string;

  /** The sender of the transaction (e.g., "k:5c54af27ee3d53273bb7b7af9bfba9567e01bff4fbe70da3ee3a57b6d454dbd2"). */
  declare sender: string;

  /** The transaction ID (e.g., "309297606"). */
  declare txid: string;

  /** Indicates whether the transaction is canonical. */
  declare canonical?: boolean;

  /** The associated block. */
  declare block: Block;
}

/**
 * Initialize the Transaction model with its attributes and configuration.
 * This defines the database schema for the Transactions table and sets up indexes
 * for efficient querying of transaction data.
 *
 * TODO: [OPTIMIZATION] Consider evaluating the performance impact of having many indexes
 * and potentially consolidating some of them for better write performance.
 */
Transaction.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
      comment: 'The unique identifier for the transaction record (e.g., 53411).',
    },
    blockId: {
      type: DataTypes.INTEGER,
      allowNull: true,
      comment: 'The ID of the associated block (e.g., 40515).',
    },
    chainId: {
      type: DataTypes.INTEGER,
      comment: 'The ID of the blockchain network (e.g., 0).',
    },
    creationtime: {
      type: DataTypes.STRING,
      comment: "The creation time of the transaction (e.g., '1715747797').",
    },
    hash: {
      type: DataTypes.STRING,
      comment: "The hash of the transaction (e.g., 'S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU').",
    },
    result: {
      type: DataTypes.JSONB,
      comment:
        "The result of the transaction (e.g., {'data': 'Write succeeded', 'status': 'success'}).",
    },
    logs: {
      type: DataTypes.STRING,
      comment:
        "The logs generated by the transaction (e.g., 'XGZIbkOVNtZkqzi1c2dUP-rrnwG0qALO-EVPXTZhV2I').",
    },
    num_events: {
      type: DataTypes.INTEGER,
      comment: 'The number of events generated by the transaction (e.g., 1).',
    },
    requestkey: {
      type: DataTypes.STRING,
      comment:
        "The request key of the transaction (e.g., 'S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU').",
    },
    sender: {
      type: DataTypes.STRING,
      comment:
        "The sender of the transaction (e.g., 'k:5c54af27ee3d53273bb7b7af9bfba9567e01bff4fbe70da3ee3a57b6d454dbd2').",
    },
    txid: {
      type: DataTypes.STRING,
      comment: "The transaction ID (e.g., '309297606').",
    },
    canonical: {
      type: DataTypes.BOOLEAN,
      comment: 'Indicates whether the transaction is canonical.',
    },
  },
  {
    sequelize,
    modelName: 'Transaction',
    indexes: [
      // Regular indexes for common query patterns
      {
        name: 'transactions_requestkey_idx',
        fields: ['requestkey'],
      },
      {
        name: 'transactions_blockId_idx',
        fields: ['blockId'],
      },
      {
        name: 'transactions_sender_idx',
        fields: ['sender'],
      },
      {
        name: 'transactions_chainId_idx',
        fields: ['chainId'],
      },
      {
        name: 'transactions_chainid_blockid_idx',
        fields: ['chainId', 'blockId'],
      },
      {
        name: 'transactions_hash_idx',
        fields: ['hash'],
      },
      {
        name: 'transactions_canonical_idx',
        fields: ['canonical'],
      },
      {
        name: 'transactions_sender_id_idx',
        fields: ['sender', 'id'],
      },
      // Search indexes using trigram similarity for text search performance
      {
        name: 'transactions_trgm_requestkey_idx',
        fields: [sequelize.fn('LOWER', sequelize.col('requestkey'))],
        using: 'gin',
        operator: 'gin_trgm_ops',
      },
      {
        name: 'transactions_trgm_hash_idx',
        fields: [sequelize.fn('LOWER', sequelize.col('hash'))],
        using: 'gin',
        operator: 'gin_trgm_ops',
      },
      {
        name: 'transactions_trgm_txid_idx',
        fields: [sequelize.fn('LOWER', sequelize.col('txid'))],
        using: 'gin',
        operator: 'gin_trgm_ops',
      },
      {
        name: 'transactions_trgm_sender_idx',
        fields: [sequelize.fn('LOWER', sequelize.col('sender'))],
        using: 'gin',
        operator: 'gin_trgm_ops',
      },
    ],
  },
);

/**
 * Define relationship between Transaction and Block models.
 * Each transaction belongs to exactly one block.
 */
Transaction.belongsTo(Block, {
  foreignKey: 'blockId',
});

export default Transaction;
