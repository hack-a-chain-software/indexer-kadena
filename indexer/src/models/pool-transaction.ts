import { DataTypes, Model } from 'sequelize';

import { sequelize } from '../config/database';
import Pair from './pair';

export enum PoolTransactionType {
  SWAP = 'SWAP',
  ADD = 'ADD',
  REMOVE = 'REMOVE',
}

export interface PoolTransactionAttributes {
  id: number;
  pairId: number;
  type: PoolTransactionType;
  timestamp: Date;
  maker: string;
  amountIn: number;
  amountOut: number;
  amountInUsd: number;
  amountOutUsd: number;
  token0Amount: number;
  token1Amount: number;
  token0AmountUsd: number;
  token1AmountUsd: number;
  feesUsd: number;
  transactionHash: string;
}

/**
 * Represents a transaction on a pool (swap, add, or remove liquidity).
 */
class PoolTransaction
  extends Model<PoolTransactionAttributes>
  implements PoolTransactionAttributes
{
  /** The unique identifier for the pool transaction record */
  declare id: number;

  /** The ID of the associated pair */
  declare pairId: number;

  /** The type of transaction (SWAP, ADD, REMOVE) */
  declare type: PoolTransactionType;

  /** The timestamp when the transaction occurred */
  declare timestamp: Date;

  /** The address of the transaction maker */
  declare maker: string;

  /** The amount of tokens sent in the transaction */
  declare amountIn: number;

  /** The amount of tokens received in the transaction */
  declare amountOut: number;

  /** The USD value of tokens sent in the transaction */
  declare amountInUsd: number;

  /** The USD value of tokens received in the transaction */
  declare amountOutUsd: number;

  /** The amount of token0 involved in the transaction */
  declare token0Amount: number;

  /** The amount of token1 involved in the transaction */
  declare token1Amount: number;

  /** The USD value of token0 involved in the transaction */
  declare token0AmountUsd: number;

  /** The USD value of token1 involved in the transaction */
  declare token1AmountUsd: number;

  /** The fees generated by the transaction in USD */
  declare feesUsd: number;

  /** The hash of the blockchain transaction */
  declare transactionHash: string;

  /** The associated pair */
  declare pair: Pair;
}

PoolTransaction.init(
  {
    id: {
      type: DataTypes.INTEGER,
      autoIncrement: true,
      primaryKey: true,
      comment: 'The unique identifier for the pool transaction record',
    },
    pairId: {
      type: DataTypes.INTEGER,
      allowNull: false,
      comment: 'The ID of the associated pair',
    },
    type: {
      type: DataTypes.ENUM(...Object.values(PoolTransactionType)),
      allowNull: false,
      comment: 'The type of transaction (SWAP, ADD, REMOVE)',
    },
    timestamp: {
      type: DataTypes.DATE,
      allowNull: false,
      comment: 'The timestamp when the transaction occurred',
    },
    maker: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'The address of the transaction maker',
    },
    amountIn: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The amount of tokens sent in the transaction',
    },
    amountOut: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The amount of tokens received in the transaction',
    },
    amountInUsd: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The USD value of tokens sent in the transaction',
    },
    amountOutUsd: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The USD value of tokens received in the transaction',
    },
    token0Amount: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The amount of token0 involved in the transaction',
    },
    token1Amount: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The amount of token1 involved in the transaction',
    },
    token0AmountUsd: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The USD value of token0 involved in the transaction',
    },
    token1AmountUsd: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: true,
      comment: 'The USD value of token1 involved in the transaction',
    },
    feesUsd: {
      type: DataTypes.DECIMAL(24, 8),
      allowNull: false,
      defaultValue: 0,
      comment: 'The fees generated by the transaction in USD',
    },
    transactionHash: {
      type: DataTypes.STRING,
      allowNull: false,
      comment: 'The hash of the blockchain transaction',
    },
  },
  {
    sequelize,
    modelName: 'PoolTransaction',
    indexes: [
      {
        name: 'pool_transactions_pairid_timestamp_idx',
        fields: ['pairId', 'timestamp'],
      },
      {
        name: 'pool_transactions_type_idx',
        fields: ['type'],
      },
      {
        name: 'pool_transactions_maker_idx',
        fields: ['maker'],
      },
      {
        name: 'pool_transactions_hash_idx',
        fields: ['transactionHash'],
        unique: true,
      },
    ],
  },
);

// Define associations
PoolTransaction.belongsTo(Pair, {
  foreignKey: 'pairId',
  as: 'pair',
});

export default PoolTransaction;
