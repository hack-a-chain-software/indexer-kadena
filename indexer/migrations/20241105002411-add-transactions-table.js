'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.createTable('Transactions', {
      id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        comment: 'The unique identifier for the transaction record (e.g., 53411).',
      },
      blockId: {
        type: Sequelize.INTEGER,
        allowNull: true,
        references: {
          model: 'Blocks',
          key: 'id',
        },
        comment: 'Foreign key referencing the related block ID',
      },
      chainId: {
        type: Sequelize.INTEGER,
        comment: 'The ID of the blockchain network (e.g., 0).',
      },
      creationtime: {
        type: Sequelize.STRING,
        comment: "The creation time of the transaction (e.g., '1715747797').",
      },
      hash: {
        type: Sequelize.STRING,
        comment:
          "The hash of the transaction (e.g., 'S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU').",
      },
      result: {
        type: Sequelize.JSONB,
        comment:
          "The result of the transaction (e.g., {'data': 'Write succeeded', 'status': 'success'}).",
      },
      logs: {
        type: Sequelize.STRING,
        comment:
          "The logs generated by the transaction (e.g., 'XGZIbkOVNtZkqzi1c2dUP-rrnwG0qALO-EVPXTZhV2I').",
      },
      num_events: {
        type: Sequelize.INTEGER,
        comment: 'The number of events generated by the transaction (e.g., 1).',
      },
      requestkey: {
        type: Sequelize.STRING,
        comment:
          "The request key of the transaction (e.g., 'S7v5RXHKgYAWAsnRfYWU_SUh6Jc4g4TU2HOEALj_JSU').",
      },
      sender: {
        type: Sequelize.STRING,
        comment:
          "The sender of the transaction (e.g., 'k:5c54af27ee3d53273bb7b7af9bfba9567e01bff4fbe70da3ee3a57b6d454dbd2').",
      },
      txid: {
        type: Sequelize.STRING,
        comment: "The transaction ID (e.g., '309297606').",
      },
      canonical: {
        type: Sequelize.BOOLEAN,
        comment: 'Indicates whether the transaction is canonical.',
      },
      createdAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
      },
      updatedAt: {
        allowNull: false,
        type: Sequelize.DATE,
        defaultValue: Sequelize.literal('CURRENT_TIMESTAMP'),
      },
    });

    // Regular indexes
    await queryInterface.addIndex('Transactions', ['requestkey'], {
      name: 'transactions_requestkey_idx',
    });
    await queryInterface.addIndex('Transactions', ['blockId'], {
      name: 'transactions_blockId_idx',
    });
    await queryInterface.addIndex('Transactions', ['sender'], { name: 'transactions_sender_idx' });
    await queryInterface.addIndex('Transactions', ['chainId'], {
      name: 'transactions_chainId_idx',
    });
    await queryInterface.addIndex('Transactions', ['chainId', 'blockId'], {
      name: 'transactions_chainid_blockid_idx',
    });
    await queryInterface.addIndex('Transactions', ['hash'], { name: 'transactions_hash_idx' });
    await queryInterface.addIndex('Transactions', ['canonical'], {
      name: 'transactions_canonical_idx',
    });
    await queryInterface.addIndex('Transactions', ['sender', 'id'], {
      name: 'transactions_sender_id_idx',
    });

    // Trigram indexes
    await queryInterface.sequelize.query(
      'CREATE INDEX transactions_trgm_requestkey_idx ON "Transactions" USING gin (LOWER(requestkey) gin_trgm_ops);',
    );
    await queryInterface.sequelize.query(
      'CREATE INDEX transactions_trgm_hash_idx ON "Transactions" USING gin (LOWER(hash) gin_trgm_ops);',
    );
    await queryInterface.sequelize.query(
      'CREATE INDEX transactions_trgm_txid_idx ON "Transactions" USING gin (LOWER(txid) gin_trgm_ops);',
    );
    await queryInterface.sequelize.query(
      'CREATE INDEX transactions_trgm_sender_idx ON "Transactions" USING gin (LOWER(sender) gin_trgm_ops);',
    );
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.dropTable('Transactions');
  },
};
